{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"localhost:5000/user/register\", userData).then(res => history.push(\"/login\"));\n  /*.catch(err =>\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    })\r\n  );*/\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"localhost:5000/user/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const token = res.data.token;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  });\n  /*.catch(err =>\r\n    dispatch({\r\n     // type: GET_ERRORS,\r\n      //payload: err.response.data\r\n    })\r\n  );*/\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["C:/Users/shopinverse/gocafe/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","loginUser","token","data","localStorage","setItem","decoded","setCurrentUser","type","payload","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC7DT,EAAAA,KAAK,CACFU,IADH,CACQ,8BADR,EACwCH,QADxC,EAEGI,IAFH,CAEQC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAFf;AAGE;;;;;;AAMH,CAVM,C,CAYP;;AACA,OAAO,MAAMC,SAAS,GAAGP,QAAQ,IAAIE,QAAQ,IAAI;AAC/CT,EAAAA,KAAK,CACFU,IADH,CACQ,2BADR,EACqCH,QADrC,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACX;AAEA;AAHW,UAIHG,KAJG,GAIOH,GAAG,CAACI,IAJX,CAIHD,KAJG;AAKXE,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC,EALW,CAMX;;AACAd,IAAAA,YAAY,CAACc,KAAD,CAAZ,CAPW,CAQX;;AACA,UAAMI,OAAO,GAAGjB,UAAU,CAACa,KAAD,CAA1B,CATW,CAUX;;AACAN,IAAAA,QAAQ,CAACW,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,GAdH;AAeE;;;;;;AAMH,CAtBM,C,CAwBP;;AACA,OAAO,MAAMC,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLE,IAAAA,IAAI,EAAEjB,gBADD;AAELkB,IAAAA,OAAO,EAAEH;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMI,cAAc,GAAG,MAAM;AAClC,SAAO;AACLF,IAAAA,IAAI,EAAEhB;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAMmB,UAAU,GAAG,MAAMf,QAAQ,IAAI;AAC1C;AACAQ,EAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACAxB,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAQ,EAAAA,QAAQ,CAACW,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\r\n\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  axios\r\n    .post(\"localhost:5000/user/register\", userData)\r\n    .then(res => history.push(\"/login\"))\r\n    /*.catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );*/\r\n};\r\n\r\n// Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n  axios\r\n    .post(\"localhost:5000/user/login\", userData)\r\n    .then(res => {\r\n      // Save to localStorage\r\n\r\n      // Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    /*.catch(err =>\r\n      dispatch({\r\n       // type: GET_ERRORS,\r\n        //payload: err.response.data\r\n      })\r\n    );*/\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n\r\n// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING\r\n  };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}